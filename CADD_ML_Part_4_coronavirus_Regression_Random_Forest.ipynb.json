{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.6"},"colab":{"name":"CDD_ML_Part_4_Acetylcholinesterase_Regression_Random_Forest.ipynb","provenance":[],"collapsed_sections":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"7AAfh_j7hSwQ"},"source":["# **Bioinformatics Project - Computational Drug Discovery [Part 4] Regression Models with Random Forest**\n","\n","Nusrat Jahan\n","\n","In this Jupyter notebook, we will be building a real-life **data science project**, we will be building a machine learning model using the ChEMBL bioactivity data.\n","\n","In **Part 4**, we will be building a regression model of coronavirus inhibitors using the random forest algorithm.\n","\n","---"]},{"cell_type":"markdown","metadata":{"id":"jw7MqTMphSwR"},"source":["## **1. Import libraries**"]},{"cell_type":"code","metadata":{"id":"D3rFTNAIhSwS","executionInfo":{"status":"ok","timestamp":1660001007389,"user_tz":300,"elapsed":2197,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["import pandas as pd\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestRegressor"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0GvT3PArhSwX"},"source":["## **2. Load the data set**"]},{"cell_type":"code","metadata":{"id":"043mRJZIhSwY","colab":{"base_uri":"https://localhost:8080/","height":289},"outputId":"96bc783e-89f4-4013-dc58-376965a73425"},"source":["#! wget https://github.com/dataprofessor/data/raw/master/acetylcholinesterase_06_bioactivity_data_3class_pIC50_pubchem_fp.csv"],"execution_count":null,"outputs":[{"output_type":"stream","text":["--2020-07-01 12:24:14--  https://github.com/dataprofessor/data/raw/master/acetylcholinesterase_06_bioactivity_data_3class_pIC50_pubchem_fp.csv\n","Resolving github.com (github.com)... 140.82.112.4\n","Connecting to github.com (github.com)|140.82.112.4|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://raw.githubusercontent.com/dataprofessor/data/master/acetylcholinesterase_06_bioactivity_data_3class_pIC50_pubchem_fp.csv [following]\n","--2020-07-01 12:24:15--  https://raw.githubusercontent.com/dataprofessor/data/master/acetylcholinesterase_06_bioactivity_data_3class_pIC50_pubchem_fp.csv\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 8363909 (8.0M) [text/plain]\n","Saving to: ‘acetylcholinesterase_06_bioactivity_data_3class_pIC50_pubchem_fp.csv’\n","\n","acetylcholinesteras 100%[===================>]   7.98M  18.2MB/s    in 0.4s    \n","\n","2020-07-01 12:24:15 (18.2 MB/s) - ‘acetylcholinesterase_06_bioactivity_data_3class_pIC50_pubchem_fp.csv’ saved [8363909/8363909]\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"cSgppzqPiR0G","executionInfo":{"status":"ok","timestamp":1660001010409,"user_tz":300,"elapsed":122,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["df = pd.read_csv('/content/coronavirus_bioactivity_data_pIC50_pubchem_fp.csv')"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kuiiC0xthSwb"},"source":["## **3. Input features**\n","The ***Coronavirus*** data set contains 881 input features and 1 output variable (pIC50 values)."]},{"cell_type":"markdown","metadata":{"id":"iCeQQn0uhSwb"},"source":["### **3.1. Input features**"]},{"cell_type":"code","metadata":{"scrolled":true,"id":"li32nAPohSwc","colab":{"base_uri":"https://localhost:8080/","height":483},"outputId":"e9afae3f-5a72-4ed1-c5d1-42aa03f9c938","executionInfo":{"status":"ok","timestamp":1660001062436,"user_tz":300,"elapsed":126,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["# we will keep the fingerprint data and will use to predict pIC50 values\n","X = df.drop('pIC50', axis=1)\n","X"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     PubchemFP0  PubchemFP1  PubchemFP2  PubchemFP3  PubchemFP4  PubchemFP5  \\\n","0             1           1           0           0           0           0   \n","1             1           1           0           0           0           0   \n","2             1           1           0           0           0           0   \n","3             1           1           0           0           0           0   \n","4             1           1           0           0           0           0   \n","..          ...         ...         ...         ...         ...         ...   \n","114           1           1           1           0           0           0   \n","115           1           1           1           0           0           0   \n","116           1           1           0           0           0           0   \n","117           1           1           0           0           0           0   \n","118           1           1           1           0           0           0   \n","\n","     PubchemFP6  PubchemFP7  PubchemFP8  PubchemFP9  ...  PubchemFP871  \\\n","0             0           0           0           1  ...             0   \n","1             0           0           0           1  ...             0   \n","2             0           0           0           1  ...             0   \n","3             0           0           0           1  ...             0   \n","4             0           0           0           1  ...             0   \n","..          ...         ...         ...         ...  ...           ...   \n","114           0           0           0           1  ...             0   \n","115           0           0           0           1  ...             0   \n","116           0           0           0           1  ...             0   \n","117           0           0           0           1  ...             0   \n","118           0           0           0           1  ...             0   \n","\n","     PubchemFP872  PubchemFP873  PubchemFP874  PubchemFP875  PubchemFP876  \\\n","0               0             0             0             0             0   \n","1               0             0             0             0             0   \n","2               0             0             0             0             0   \n","3               0             0             0             0             0   \n","4               0             0             0             0             0   \n","..            ...           ...           ...           ...           ...   \n","114             0             0             0             0             0   \n","115             0             0             0             0             0   \n","116             0             0             0             0             0   \n","117             0             0             0             0             0   \n","118             0             0             0             0             0   \n","\n","     PubchemFP877  PubchemFP878  PubchemFP879  PubchemFP880  \n","0               0             0             0             0  \n","1               0             0             0             0  \n","2               0             0             0             0  \n","3               0             0             0             0  \n","4               0             0             0             0  \n","..            ...           ...           ...           ...  \n","114             0             0             0             0  \n","115             0             0             0             0  \n","116             0             0             0             0  \n","117             0             0             0             0  \n","118             0             0             0             0  \n","\n","[119 rows x 881 columns]"],"text/html":["\n","  <div id=\"df-0cd0d6bb-0c9c-4567-9489-c32a59a07517\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PubchemFP0</th>\n","      <th>PubchemFP1</th>\n","      <th>PubchemFP2</th>\n","      <th>PubchemFP3</th>\n","      <th>PubchemFP4</th>\n","      <th>PubchemFP5</th>\n","      <th>PubchemFP6</th>\n","      <th>PubchemFP7</th>\n","      <th>PubchemFP8</th>\n","      <th>PubchemFP9</th>\n","      <th>...</th>\n","      <th>PubchemFP871</th>\n","      <th>PubchemFP872</th>\n","      <th>PubchemFP873</th>\n","      <th>PubchemFP874</th>\n","      <th>PubchemFP875</th>\n","      <th>PubchemFP876</th>\n","      <th>PubchemFP877</th>\n","      <th>PubchemFP878</th>\n","      <th>PubchemFP879</th>\n","      <th>PubchemFP880</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>114</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>115</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>116</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>117</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>118</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>119 rows × 881 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0cd0d6bb-0c9c-4567-9489-c32a59a07517')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-0cd0d6bb-0c9c-4567-9489-c32a59a07517 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0cd0d6bb-0c9c-4567-9489-c32a59a07517');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"sGQjCQtfhSwg"},"source":["### **3.2. Output features**"]},{"cell_type":"code","metadata":{"id":"OWylAtAVhSwh","colab":{"base_uri":"https://localhost:8080/"},"outputId":"1a0bf217-7c63-470a-e50a-7ec17994dd51","executionInfo":{"status":"ok","timestamp":1660001883443,"user_tz":300,"elapsed":149,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["#This is the experimental pIC50 values which will be used to compare with predicted pIC50\n","Y = df.pIC50\n","Y"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      4.869666\n","1      4.882397\n","2      6.008774\n","3      6.022276\n","4      4.950782\n","         ...   \n","114    4.974694\n","115    4.995679\n","116    4.939302\n","117    4.970616\n","118    4.102923\n","Name: pIC50, Length: 119, dtype: float64"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"E-zGSqXohSwx"},"source":["### **3.3. Let's examine the data dimension**"]},{"cell_type":"code","metadata":{"id":"nhT04XtLhSwx","colab":{"base_uri":"https://localhost:8080/"},"outputId":"85126cc8-74db-4679-e20e-c73a1ff29601","executionInfo":{"status":"ok","timestamp":1660001889479,"user_tz":300,"elapsed":143,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["X.shape"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(119, 881)"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"uzQlK8gNhSw0","colab":{"base_uri":"https://localhost:8080/"},"outputId":"df4fb556-6f70-4fed-b4c2-4192dce79650","executionInfo":{"status":"ok","timestamp":1660001891856,"user_tz":300,"elapsed":107,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["Y.shape"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(119,)"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"0qQCpX097qf_"},"source":["### **3.4. Remove low variance features**"]},{"cell_type":"code","metadata":{"id":"rjHK2SoI7tXI","executionInfo":{"status":"ok","timestamp":1660001958219,"user_tz":300,"elapsed":134,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["#lower varinace feature will be removed 137 fingerprints left\n","from sklearn.feature_selection import VarianceThreshold\n","selection = VarianceThreshold(threshold=(.8 * (1 - .8)))    \n","X = selection.fit_transform(X)"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"nXcpQh_s8nx7","colab":{"base_uri":"https://localhost:8080/"},"outputId":"d7b5daf7-eeab-4e4d-999d-1e932d10481a","executionInfo":{"status":"ok","timestamp":1660001961715,"user_tz":300,"elapsed":113,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["X.shape"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(119, 197)"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"AjhOlkOVhSxR"},"source":["## **4. Data split (80/20 ratio)**"]},{"cell_type":"code","metadata":{"id":"M1Bmg1HWhSxR","executionInfo":{"status":"ok","timestamp":1660002157227,"user_tz":300,"elapsed":272,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"uz1o3c1LhSxU","colab":{"base_uri":"https://localhost:8080/"},"outputId":"fb2a635c-b6d9-4ef5-c839-03d1355273fb","executionInfo":{"status":"ok","timestamp":1660002158786,"user_tz":300,"elapsed":132,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["X_train.shape, Y_train.shape"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((95, 197), (95,))"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"4tnwDASChSxW","colab":{"base_uri":"https://localhost:8080/"},"outputId":"aa60027b-a67d-412f-b7fa-701e402e1c5f","executionInfo":{"status":"ok","timestamp":1660002195361,"user_tz":300,"elapsed":134,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["X_test.shape, Y_test.shape"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((24, 197), (24,))"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"PYsE-tIAhSw3"},"source":["## **5. Building a Regression Model using Random Forest**"]},{"cell_type":"code","metadata":{"id":"YHM3DCD5wuNe","colab":{"base_uri":"https://localhost:8080/"},"outputId":"25389e18-0258-4e50-c378-3c1a9e976ea4","executionInfo":{"status":"ok","timestamp":1660002284055,"user_tz":300,"elapsed":375,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["import numpy as np\n","np.random.seed(100)\n","model = RandomForestRegressor(n_estimators=100)\n","model.fit(X_train, Y_train)\n","r2 = model.score(X_test, Y_test)\n","r2"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.16532953946218243"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"A4Rv5wdQ1M6H","executionInfo":{"status":"ok","timestamp":1660002472311,"user_tz":300,"elapsed":126,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["Y_pred = model.predict(X_test)"],"execution_count":30,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LoLgjePyUXcv"},"source":["## **6. Scatter Plot of Experimental vs Predicted pIC50 Values**"]},{"cell_type":"code","metadata":{"id":"hfqpfjxw3IAK","colab":{"base_uri":"https://localhost:8080/","height":415},"outputId":"e7d86557-ac2f-4fde-cf13-a64af4102194","executionInfo":{"status":"ok","timestamp":1660002478173,"user_tz":300,"elapsed":553,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","sns.set(color_codes=True)\n","sns.set_style(\"white\")\n","\n","ax = sns.regplot(Y_test, Y_pred, scatter_kws={'alpha':0.4})\n","ax.set_xlabel('Experimental pIC50', fontsize='large', fontweight='bold')\n","ax.set_ylabel('Predicted pIC50', fontsize='large', fontweight='bold')\n","ax.set_xlim(0, 12)\n","ax.set_ylim(0, 12)\n","ax.figure.set_size_inches(5, 5)\n","plt.show"],"execution_count":31,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"]},{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show>"]},"metadata":{},"execution_count":31},{"output_type":"display_data","data":{"text/plain":["<Figure size 360x360 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}